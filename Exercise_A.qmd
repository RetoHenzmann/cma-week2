---
title: "Exercise_A"
format: html
editor: visual
---

# Task 1: Import your Data

```{r}
library("readr")
library("sf")
library("dplyr")

wildschwein_BE <- read_delim("wildschwein_BE_2056.csv", ",")

wildschwein_BE <- st_as_sf(wildschwein_BE, coords = c("E", "N"), crs = 2056)
```

Note:

-   that this dataset is already converted to EPSG 2056

-   the coordinates are stored in the columns (`E`/`N`)

# **Task 2: Getting an overview {sec-w2a-task2}**

Calculate the time difference between subsequent rows as described in the demo. You can calculate the time difference using the function `difftime_secs()` (see below) in combination with `lead()` (see [lead() / lag()](https://computationalmovementanalysis.github.io/FS24/Week2/2_demo_tidyverse.html#sec-lead-lag)). Store the time difference in a new column (e.g. `timelag`).

```{r}
difftime_secs <- function(x, y){
  as.numeric(difftime(x, y, units = "secs"))
}
```

```{r}
wildschwein_BE <- mutate(wildschwein_BE, timelag = as.numeric(difftime_secs(lead(DatetimeUTC), DatetimeUTC)))

wildschwein_BE
```

# **Task 3: Distance between locations**

Similar to how we calculated the `timelag` between subsequent locations, we can calculate the distance like so:

```{r}
st_distance(later, now, by_element = TRUE)  # by_element must be set to TRUE
```

However, similar to `difftime()`, the output has a unit which complicates things. Therefore, it's simpler to wrap the output in `as.numeric()`. Let's make a function for this process:

```{r}
distance_by_element <- function(later, now){
  as.numeric(
    st_distance(later, now, by_element = TRUE)
  )
}
```

Use this function to create a new column named `steplength` with the distance between locations.

```{r}
wildschwein_BE <- mutate(wildschwein_BE, steplength = as.numeric(distance_by_element(lead(geometry), geometry)))

wildschwein_BE
```

# **Task 4: Deriving distance & speed**

In this task we will derive some additional movement parameters from our trajectories. So far our trajectories only consist of a list of time-stamped spatial locations. First let's calculate the Euclidean distance between subsequent locations using the function `st_distance()` with the option `by_element = TRUE`. Store these values in a new column with the name `steplength`. Next, you can calculate the animals' speed based on `steplength` and the `timelag` (from the last task).

```{r}
wildschwein_BE <- mutate(wildschwein_BE, steplength = st_distance(lead(geometry), geometry), by_element = TRUE)

```

```{r}
wildschwein_BE <- mutate(wildschwein_BE, speed = steplength/timelag)
```

# **Task 5: Plausibility Check**

It's important to repeatedly visualize our results, to make sure these are plausible. This is much simpler if we just look at a small sample of our dataset. We can use `slice()` to extract just a couple of rows

```{r}
wildschwein_sample <- wildschwein_BE |>
  filter(TierName == "Sabi") |> 
  head(100)
```

We can now visualise the sample using tmap with the \*view" mode:

```{r}
library(tmap)
tmap_mode("view")

tm_shape(wildschwein_sample) + 
  tm_dots()
```

The wild boar move continuously through space, but our samples are discrete points. It would be helpful to at least see the sequence of these samples. We can do this by casting our points to lines. However, we first need to dissolve our single points into a `MULTIPOINT` object, just like we had to do in the first week when we calculated the minimum convex polygon per animal (see [Input: Calculate Convex Hull](https://computationalmovementanalysis.github.io/FS24/Week1/2_tasks_and_inputs.html#sec-convex-hull)). The option `do_union = FALSE` is a confusing way to preserve the order of the points, see [Nils' question on GitHub](https://github.com/r-spatial/sf/issues/692).

In addition, we can set `OpenStreetMap` to be the default basemap, since it's available at lower zoom levels.

```{r}
wildschwein_sample_line <- wildschwein_sample |> 
  # dissolve to a MULTIPOINT:
  summarise(do_union = FALSE) |> 
  st_cast("LINESTRING")

tmap_options(basemaps = "OpenStreetMap")

tm_shape(wildschwein_sample_line) +
  tm_lines() +
  tm_shape(wildschwein_sample) + 
  tm_dots()
```
